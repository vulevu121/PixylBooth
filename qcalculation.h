/****************************************************************************
**
** Namespace QCalculation generated by dumpcpp v5.11.2 using
** c:\program files\python\python37\lib\site-packages\pyqt5_tools\dumpcpp.exe {791d8177-81c2-4516-8347-38403ec944a5}
** from the type library C:\Users\Vu\Documents\PixylBooth\QCalculation.tlb
**
****************************************************************************/

#ifndef QAX_DUMPCPP_QCALCULATION_H
#define QAX_DUMPCPP_QCALCULATION_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef QCALCULATION_EXPORT
#define QCALCULATION_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace
namespace mscorlib {
    class _Type;
}

Q_DECLARE_OPAQUE_POINTER(mscorlib::_Type*)

namespace QCalculation {


class QCALCULATION_EXPORT ComClass1Interface : public QAxObject
{
public:
    ComClass1Interface(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface ComClass1Events

// Actual coclasses
class QCALCULATION_EXPORT calculate : public QAxObject
{
public:
    calculate(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{0d53a3e8-e51a-49c7-944e-e72a2064f938}"));
    }

    calculate(ComClass1Interface *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_QCALCULATION_NOINLINES

inline QString calculate::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool calculate::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int calculate::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* calculate::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<QCalculation::ComClass1Interface, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<QCalculation::ComClass1Interface*>(t)->QCalculation::ComClass1Interface::~ComClass1Interface();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) QCalculation::ComClass1Interface;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const QCalculation::ComClass1Interface*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<QCalculation::ComClass1Interface*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<QCalculation::calculate, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<QCalculation::calculate*>(t)->QCalculation::calculate::~calculate();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) QCalculation::calculate;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const QCalculation::calculate*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<QCalculation::calculate*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

